import ButtonsContainer from "@/components/buttonsContainer";
import InputContainer from "@/components/inputContainer";
import ResultsTable from "@/components/resultsTable";
import CombinedTable from "@/components/table";
import Head from "next/head";
import { useState, useCallback } from "react";


export default function Home() {
  const [rows, setRows] = useState<number>(0);
  const [columns, setColumns] = useState<number>(0);
  const [refresh, setRefresh] = useState<boolean>(false);
  const [showResultTable, setShowResultTable] = useState<boolean>(false);
  const [operation, setOperation] = useState<number>(0);
  const [additionValues, setAdditionValues] = useState<Record<string, number>>({});
  const [multiplicationValues, setMultiplicationValues] = useState<Record<string, number>>({});

  const initializeValues = useCallback(() => {
    const newAdditionValues: Record<string, number> = {};
    const newMultiplicationValues: Record<string, number> = {};

    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {
      for (let colIndex = 0; colIndex < columns; colIndex++) {
        let additionValue = rowIndex + colIndex;
        let multiplicationValue = rowIndex * colIndex;

        newAdditionValues[`r${rowIndex}c${colIndex}`] = additionValue;
        newMultiplicationValues[`r${rowIndex}c${colIndex}`] = multiplicationValue;
      }
    }

    setAdditionValues(newAdditionValues);
    setMultiplicationValues(newMultiplicationValues);
  }, [rows, columns]);

  const generate = useCallback(() => {
    setRefresh(prev => !prev);
  }, [initializeValues]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container pt-5">
        <InputContainer
          rows={rows}
          columns={columns}
          setRows={setRows}
          setColumns={setColumns}
          generate={generate}
          setOperation={setOperation}
        />
        <CombinedTable
          rows={rows}
          columns={columns}
          refresh={refresh}
          additionValues={additionValues}
          setAdditionValues={setAdditionValues}
          multiplicationValues={multiplicationValues}
          setMultiplicationValues={setMultiplicationValues}
        />
        <ButtonsContainer setOperation={setOperation} setShowResultTable={setShowResultTable} />
        {showResultTable && <ResultsTable
          rows={rows}
          columns={columns}
          additionValues={additionValues}
          multiplicationValues={multiplicationValues}
          operation={operation}
        />}
      </div>
    </>
  );
}
